<?php

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;


//function enrope_e_portfolio_node_access(NodeInterface $node, $op, AccountInterface $account) {
//  if ($account->isAnonymous() && ($node->gettype() == 'e_portfolio' || $node->gettype() == 'portfolio_competency')) {
//    return AccessResult::forbidden()->cachePerPermissions();
//  }
//  return AccessResult::neutral()->cachePerPermissions();
//}

/**
 * Implements hook_form_alter().
 */
function enrope_e_portfolio_form_alter(&$form, FormStateInterface $form_state, $form_id)
{


  if ($form_id == 'node_portfolio_competency_form' || $form_id == 'node_autobiography_form' || $form_id == 'node_portfolio_showcase_form') {


    $task_id = \Drupal::request()->query->get('task_id');

    if (empty($form['field_connected_task']['widget']['#default_value'])) {
      if ($task_id) {
        $form['field_connected_task']['widget']['#default_value'] = $task_id;
        $form['field_connected_task']['#disabled'] = true;
      }
    }

    if ($task_id) {
      $form['#attached']['library'][] = 'core/drupal.dialog.ajax';

      $form['open_modal_task_preview'] = array(
        '#type' => 'link',
        '#title' => t('Preview task'),
        '#url' => Url::fromRoute('entity.node.canonical', ['node' => $task_id]),
        '#weight' => $form['field_connected_task']['#weight'] + 0.5,
        '#attributes' => array(
          'class' => array('button btn btn-success', 'use-ajax'),
          'data-dialog-type' => 'modal',
          'data-dialog-options' => '{"width":500,"dialogClass":"webform-ui-dialog"}',
        ),
        '#prefix' => '<div class="form-group col-auto">',
        '#suffix' => '</div>',
      );

    }


  }

  if ($form_id == 'node_portfolio_competency_edit_form' || $form_id == 'node_autobiography_edit_form' || $form_id == 'node_portfolio_showcase_edit_form') {
    if ($form_state->getFormObject() instanceof EntityFormInterface) {
      $node = $form_state->getformObject()->getEntity();

      if (!empty($node)) {
        $form['field_connected_task']['#disabled'] = true;
        $task_id = $node->get('field_connected_task')->getValue()[0]['target_id'];
        if (!empty($task_id)) {
          $form['#attached']['library'][] = 'core/drupal.dialog.ajax';

          $form['open_modal_task_preview'] = array(
            '#type' => 'link',
            '#title' => t('Preview task'),
            '#url' => Url::fromRoute('entity.node.canonical', ['node' => $task_id]),
            '#weight' => $form['field_connected_task']['#weight'] + 0.5,
            '#attributes' => array(
              'class' => array('button btn btn-success', 'use-ajax'),
              'data-dialog-type' => 'modal',
              'data-dialog-options' => '{"width":500,"dialogClass":"webform-ui-dialog"}',
            ),
            '#prefix' => '<div class="form-group col-auto">',
            '#suffix' => '</div>',
          );
        }


      }

    }
  }

  if ($form_id == 'node_e_portfolio_form' || $form_id == 'node_e_portfolio_edit_form') {
    $form['alert'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="alert alert-primary" role="alert">
  Your <strong>Published</strong> portfolio items like task answers, competencies, showcases and autobiography items are automatically linked once you save your first portfolio
</div>',
    ];
  }



}


/**
 * Implements hook_theme() to add the template definition.
 **/
function enrope_e_portfolio_theme($existing, $type, $theme, $path)
{
  // Query for newest articles and return max 3 results.

  return array(
    'enrope_all_tasks_template' => array(
      'variables' => array('items' => null),
    ),
  );
}


/**
 * Add Key notions vocabulary
 */
function enrope_e_portfolio_update_8001(&$sandbox)
{
  $vid = "key_notions";
  $name = "Key notions";
  $vocabularies = Vocabulary::loadMultiple();
  if (!isset($vocabularies[$vid])) {
    $vocabulary = Vocabulary::create(array(
      'vid' => $vid,
      'name' => $name,
    ));
    $vocabulary->save();
  }


  $items = [
    'Agency',
    'Autonomy',
    'Collaboration',
    'Critical discourse',
    'Culture',
    'Diversity',
    'Education',
    'Educational Cultures',
    'Identity',
    'Language(s) (homeschool / own / immersion)',
    'Mediation',
    'Pluri- / multi- / translingualism / translanguaging / translingual teaching',
    'Role',
    'Self-reflection and meta-reflection',
    'Social representation'
  ];
  foreach ($items as $item) {
    $term = Term::create(array(
      'parent' => array(),
      'name' => $item,
      'vid' => $vid,
    ))->save();
  }


}
