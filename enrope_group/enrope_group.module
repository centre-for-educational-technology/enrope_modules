<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

function enrope_group_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Adding custom validation for group join form
  if ($form_id == 'group_content_isp_group_type-group_membership_group-join_form') {
    $form['actions']['submit']['#submit'][] = '_custom_form_submit';
  }
}

function _custom_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  //Redirect to group main page after join
  $group_content = $form_state->getFormObject()->getEntity();
  $group = $group_content->getGroup();

  $url = url::fromUserInput('/group/' . $group->id());
  $form_state->setRedirectUrl($url);
}


// Hide Delete tab of group
function enrope_group_menu_local_tasks_alter(&$data, $route_name)
{

  unset($data['tabs'][0]['group.delete_form']);

}


/**
 * Implements hook_entity_presave().
 */
function enrope_group_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity->bundle() == 'autobiography' || $entity->bundle() == 'portfolio_competency' | $entity->bundle() == 'portfolio_showcase') {

    $task_id = $entity->get('field_connected_task')->getValue()[0]['target_id'];
    $task = Node::load($task_id);
    $task_title = $task->get('title')->value;

    if (!empty($task_title)) {
      if (strpos($entity->getTitle(), $task_title) != true) {

        $entity->setTitle($entity->getTitle() . ': ' . $task_title);

      };


    }


  }

}


/**
 * Implements hook_path_update().
 *
 * Track path alias changes to published node translations that are related
 * to a group.
 */
//function enrope_group_path_update($path) {
//  if (empty($path['source']) || !\Drupal::moduleHandler()->moduleExists('pathauto')) {
//    return;
//  }
//
//  // Extract nid from the source path.
//  if (preg_match('@^\/node\/(\d+)$@', $path['source'], $node_matches)) {
//    // Load the node.
//    $nid = $node_matches[1];
//    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
//    if ($node) {
//      $pathauto = \Drupal::service('pathauto.generator');
//      $entity_mgr = \Drupal::service('entity.repository');
//      $langcode = !empty($path['langcode']) ? $path['langcode'] : \Drupal::service('language.default')->get()->getId();
//      // Get the node translation.
//      $node_translation = $entity_mgr->getTranslationFromContext($node, $langcode);
//
//      // Only update published nodes.
//      if ($node_translation->isPublished()) {
//        // Find the group relations for this node.
//        $relation_storage = \Drupal::entityTypeManager()->getStorage('group_content');
//        // Clear group_content static cache to clear stale data for the node.
//        $relation_storage->resetCache();
//        // Load group_content for the node.
//        $relations = $relation_storage->loadByEntity($node_translation);
//        if ($relations) {
//          // Update the alias for each relation in the same language.
//          foreach ($relations as $relation) {
//            $relation_update = $entity_mgr->getTranslationFromContext($relation, $langcode);
//            $pathauto->updateEntityAlias($relation_update, 'update');
//          }
//        }
//      }
//    }
//  }
//}
